;; david cobac
;; juillet 2025
(define (voisinage n ligne colonne)
  (let ((voisins '()))
    (let boucle1 ((dl -1))
      (unless (= dl 2)
	(let ((l (+ dl ligne)))
	    (let boucle2 ((dc -1))
	      (unless (= dc 2)
		(let ((c (+ dc colonne)))
		  (when (and (not (equal? (cons l c) (cons ligne colonne)))
			     (and (>= l 0) (< l n))
			     (and (>= c 0) (< c n)))
		    (set! voisins (append voisins (list (cons l c)))))
		  (boucle2 (+ 1 dc)))))
	    (boucle1 (+ 1 dl)))))
    voisins))

(define (incremente-voisins grille ligne colonne)
  (let ((voisins (voisinage (vector-length grille) ligne colonne)))
    (let boucle ((v voisins))
      (unless (null? v)
	(let* ((levoisin (car v))
	       (l (car levoisin))
	       (c (cdr levoisin))
	       (vct (vector-ref grille l))
	       (val (vector-ref vct c)))
	  (unless (= val -1)
	    (vector-set! vct c (+ 1 val))))
	(boucle (cdr v))))))

(define (genere-grille bombes)
  (let* ((n (vector-length bombes))
	 (grille (make-vector n)))
    (let boucle1 ((i 0))
      (unless (= i n)
	(vector-set! grille i (make-vector n 0))
	(boucle1 (+ 1 i))))
    (let boucle2 ((i 0))
      (unless (= i n)
	(let* ((pos (vector-ref bombes i))
	       (ligne (car pos))
	       (colonne (cdr pos)))
      	  (vector-set! (vector-ref grille ligne) colonne -1)
	  (incremente-voisins grille ligne colonne))
	(boucle2 (+ 1 i))))
    grille))

;; tests
(newline)(write (genere-grille #((1 . 1) (2 . 4) (3 . 1) (3 . 3) (4 . 4))))
